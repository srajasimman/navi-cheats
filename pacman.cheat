% pacman, packages, package manager, arch
@ environment, env var, path
; see: https://wiki.archlinux.org/title/Pacman/Rosetta

# upgrade all packages
sudo pacman -Syu

# upgrade all packages (force refresh repo databases)
sudo pacman -Syyu

# check for package updates
checkupdates

# search for a package
pacman -Ss <search_string>

# install (sync) a package
sudo pacman -S <not_installed_package>

# browse installed packages
pacman -Qq | fzf --preview "pacman -Qi {}"

# info about installed package
pacman -Qi <installed_package>

# info about explicitly installed package
pacman -Qi <installed_package_explicit>

# sizes of all installed packages
LC_ALL=C pacman -Qi | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h | column -t

# describe all explicitly installed + orphaned packages, that are not in the base group
expac -H M '%-20n\t%10d' $(comm -23 <(pacman -Qqt | sort) <({ pacman -Qqg base-devel; echo base; } | sort -u))

# describe all explicitly installed packages or optional dependencies, that are not in the base group
expac -H M '%-20n\t%10d' $(comm -23 <(pacman -Qqett | sort) <({ pacman -Qqg base-devel; echo base; } | sort -u))

# info about available (not installed) package
pacman -Si <not_installed_package>

# uninstall (remove) package
sudo pacman -R <installed_package_explicit>

# uninstall (remove) package and dependencies
sudo pacman -Rs <installed_package_explicit>

# uninstall (remove) package, deps + config files
sudo pacman -Rns <installed_package_explicit>

# which package provides (owns) a file
pacman -Qo <file>

# which package provides a command
pacman -Qqo <installed_command> | pacman -Qi -

# which package provides a file in $PATH (by dir)
pacman -Qo <file_in_path>

# which package provides an executable in $PATH
pacman -Qo <all_in_path>

# which package provides a file
pacman -Qo <file>

# list files provided by local package
pacman -Qlq <installed_package>

# browse files provided by a local package
pacman -Qlq <installed_package> | fzf --preview='bat -f 2>/dev/null {} || ls {}'

# which files would be provided by an available package
pacman -Flq <not_installed_package>

# which package requires this as a dependency
pacman -Qi <installed_package_dependency> | grep 'Required By'

# search for package
pacman -Ss <package>

# list orphaned packages (no longer required as deps)
pacman -Qdt

# sizes of all orphaned packages
LC_ALL=C pacman -Qdti | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h | column -t

# remove an orphaned package
sudo pacman -Rns <installed_package_orphan>

# remove all orphaned packages
pacman -Qdtq | sudo pacman -Rns -

# mark package as explicitly installed
sudo pacman -D --asexplicit <installed_package_dependency>

# mark package as dependency
sudo pacman -D --asdeps <installed_package_explicit>

# downgrade package
sudo pacman -U /var/cache/pacman/pkg/<cached_package>

# which package could provide a file
pacman -F <command>

# which package could provide a command (highlight 'bin' files)
pacman -F <command> | grep --color=always -e "^" -e "bin"

# list foreign (not in main repos) packages
pacman -Qm

# sizes of all foreign packages
LC_ALL=C pacman -Qmi | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h | column -t

# browse package groups
<package_group>

# browse packages in a group
pacman -Sgq <package_group> | fzf --preview='pacman -Si {}'

# which dependencies are/are not already installed
pacman -Si <not_installed_package> | sed -n 's/Depends On.*://p' | tr -s ' ' "\n" | pacman -Q -

# list missing dependencies for package
pacman -Si <not_installed_package> | sed -n 's/Depends On.*://p' | tr -s ' ' "\n" | pacman -T -

# browse missing dependencies for package
pacman -Si <not_installed_package> | sed -n 's/Depends On.*://p' | pacman -T - | tr -s ' ' "\n" | fzf --preview='pacman -Si {}'

# list packages by install / upgrade date (latest build)
expac --timefmt='%Y-%m-%d %T' '%l  %n' | sort -r | fzf

# limited dependency tree for package
pactree --depth <number> <available_package>

# dependency tree for installed package
pactree -c <installed_package>

# reverse dependency tree (what needs this) for installed package
pactree -cr <installed_package>

# dependency tree for non-installed package
pactree -cs <not_installed_package>

# original install date for package
paclog --package <installed_package> | head -n 1

;for p in `pacman -Qq`; do echo "$p $(paclog --package $p | head -n 1)"; done

# transaction log for installed package
paclog --package <installed_packages_bydate>

# pacman warnings
paclog --warnings

$ installed_package: pacman -Qq --- --preview "pacman -Qi {}" --multi --expand
$ installed_package_explicit: pacman -Qqe --- --preview "pacman -Qi {}" --multi --expand
$ installed_package_dependency: pacman -Qqd --- --preview "pacman -Qi {}" --multi --expand
$ installed_package_foreign: pacman -Qqm --- --preview "pacman -Qi {}" --multi --expand
$ installed_package_orphan: pacman -Qqdt --- --preview "pacman -Qi {}" --multi --expand
$ installed_packages_bydate: expac --timefmt='%Y-%m-%d %T' '%l  %n' | sort -r --- --column 2
$ available_package: pacman -Slq --- --preview "pacman -Si {}" --multi --expand
$ not_installed_package: comm -13 \
  <(pacman -Qq | sort) \
  <(pacman -Slq | sort) \
  --- --preview "pacman -Si {}" --multi --expand
$ file: find . -maxdepth 1 -mindepth 1 -type f -printf '%P\n'
$ cached_package: find /var/cache/pacman/pkg/ -name *.pkg.tar.zst -type f -printf '%P\n'
; -name *.tar.zst -execdir echo {} ";" | sed 's!.*/!!'
; â†‘ cleaner output but not what the downgrade command needs
$ installed_command: compgen -c --- --multi --expand
$ package_group: pacman -Sg --- --preview "pacman -Sgq {}" --multi --expand
